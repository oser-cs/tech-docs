============
Installation
============

Le site d'OSER est d√©compos√©e en deux parties : le backend et le frontend qui communiquent essentiellement via une API REST. En cons√©quence, il y a **deux serveurs de d√©veloppement** √† installer : le serveur backend et le serveur frontend.

Cette page vous indique √©tape par √©tape comment installer chacun de ces serveurs en local. Cela vous permet de faire tourner le site sur votre propre ordinateur afin d'y apporter des modifications.

Pr√©requis
=========

Git
---

Vous aurez besoin de `Git <https://git-scm.com>`_ pour cloner le d√©p√¥t. Une connaissance basique de ce syst√®me de gestion de version est requise. R√©f√©rez-vous √† des tutoriels (par exemple `celui-ci <https://try.github.io/levels/1/challenges/1>`_) si besoin. :)

Backend
-------

Python et virtualenv
********************

Le backend du site repose sur Django et donc Python. Munissez-vous de `Python 3.5+ <https://www.python.org/downloads/>`_ et de `virtualenv <https://pypi.python.org/pypi/virtualenv>`_ si ce n'est pas encore fait. Vous pouvez aussi consulter la page :doc:`ressources-apprentissage/dev-python` pour plus d'informations sur l'installation et l'utilisation de ``virtualenv``.

Django et le Django REST Framework
**********************************

Une connaissance minimale de Django est requise, c'est pourquoi je vous recommande fortement de suivre quelques tutoriels, par exemple `celui d'OpenClassrooms <https://openclassrooms.com/courses/introduction-au-framework-django>`_. Vous pouvez passer rapidement sur les templates, car comme pr√©cis√© en introduction cette partie de Django n'est pas utilis√©e ici.

Enfin, la gestion de l'API REST suppose une connaissance minimale du `Django REST Framework (DRF) <http://www.django-rest-framework.org>`_, une surcouche de Django qui permet d'√©crire facilement et efficacement une API REST. Jetez un ≈ìil √† la page `Tutorials and resources <http://www.django-rest-framework.org/topics/tutorials-and-resources/>`_ du DRF pour bien d√©marrer.

Frontend
--------

.. note:: En construction

Serveur backend
================

Nous allons voir ici comment installer l'environnement de d√©veloppement backend du site. Le backend concerne, rappelons-le, tout ce qui ne concerne pas l'interface utilisateur : bases de donn√©es, t√¢ches de fond, services‚Ä¶ √Ä la fin de ce processus, vous aurez un serveur backend local fonctionnel !

Installation des d√©pendances
----------------------------

Tout d'abord, clonez le d√©p√¥t du backend sur votre ordinateur :
::
  $ git clone https://github.com/oser-cs/oser-backend.git
  $ cd oser-backend

Cr√©ez ensuite un environnement virtuel appel√© ``env`` puis activez-le :
::
  oser-backend $ virtualenv env
  oser-backend $ source env/bin/activate

Installez les d√©pendances Python du back en utilisant ``pip`` :
::
  (env) oser-backend $ pip install -r requirements.txt

Vous pouvez ensuite vous placer dans le dossier source, d'o√π vous effectuerez la majorit√© de votre travail :
::
  (env) oser-backend $ cd oser_backend

.. note:: Les aper√ßus shell ci-apr√®s ne feront plus appara√Ætre le pr√©fixe de la ligne de commande. Sauf indication contraire, on supposera que le dossier courant est ``oser-backend/oser_backend`` (l√† o√π se situe le fichier ``manage.py``) et que l'environnement virtuel est, le cas √©ch√©ant, activ√©.

Configuration de la base de donn√©es
-----------------------------------

Pour tourner, le back a besoin d'une **base de donn√©es**. √Ä ce stade, vous n'en avez pas encore. Django permet de g√©n√©rer la base de donn√©es et son sch√©ma gr√¢ce aux **migrations** : il analyse la base de donn√©es actuelle et d√©termine automatiquement les op√©rations √† effectuer pour la rendre op√©rationnelle et synchronis√©e avec le code source.

Du coup, cre√©z puis ex√©cutez les migrations Django :
::
  $ python manage.py makemigrations
  $ python manage.py migrate

Ex√©cution des tests
-------------------

Le serveur backend dispose d'une batterie de tests qui permettent de s'assurer que la majorit√© des fonctionnalit√©s est op√©rationnelle. Lancez les tests pour vous assurer que tout fonctionne comme pr√©vu :
::
  $ python manage.py test

Population de la base de donn√©es (optionnel)
--------------------------------------------

Vous pouvez peupler la base de donn√©es avec des donn√©es factices. Cette √©tape est recommand√©e si vous pr√©voyez d'acc√©der au frontend (sinon, le site aura l'air bien vide‚Ä¶).

Pour cela, utilisez la commande ``populatedb`` :
::
  $ python manage.py populatedb

.. todo::
  Guide d'utilisation et de maintenance de ``populatedb``.

D√©marrage du site en mode d√©veloppement
---------------------------------------

Une fois tout ceci fait, vous pouvez d√©marrer le serveur local Django avec la commande ``runserver`` :
::
  (env) oser_backend $ python manage.py runserver

Si vous vous rendez √† l'adresse `http://localhost:8000/ <http://localhost:8000/>`_, vous devriez voir appara√Ætre la documentation de l'API. Si c'est le cas, le serveur Django est fonctionnel ! üëç

.. image:: /media/api-docs.png

D√©tail des d√©pendances
----------------------

.. _Django : https://www.djangoproject.com
.. _release news: https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/)
.. _Django REST Framework : http://www.django-rest-framework.org
.. _DRY Rest Permissions : https://github.com/dbkaplan/dry-rest-permissions
.. _FactoryBoy : http://factoryboy.readthedocs.io/en/latest/index.html

Django
******

Django_ est un framework de d√©veloppement web pour Python.

Le site d'OSER utilise Django en version 2.0.

> √Ä l'heure actuelle, peu de tutoriels Django se basent sur la version 2.0, mais il y a en fait tr√®s peu de changements non-r√©tro-compatibles par rapport √† la version 1.11, et aucun changement n'est r√©ellement critique. Les am√©liorations apport√©es par la version 2.0 sont int√©ressantes, on peut notamment citer le syst√®me d'√©criture des URLs qui est grandement simplifi√©. Pour plus d'infos, lire la `release news`_ associ√©e.

Django REST Framework
*********************

Le `Django REST Framework`_ (DRF) permet d'√©crire facilement des API REST avec Django. Le site d'OSER utilise le DRF en version 3.7.3. Cette version est enti√®rement compatible avec Django 2.0.

DRY Rest Permissions
********************

`DRY REST Permissions`_ est utilis√© pour d√©finir les permissions de l'API directement sur les mod√®les Django.

FactoryBoy
**********

`FactoryBoy`_ est utilis√© pour faciliter la cr√©ation d'objets de test en d√©finissant des usines (*factories*) directement √† partir des mod√®les Django. Les usines sont d√©finies dans ``oser_backend/tests/factory.py``.
